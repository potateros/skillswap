# SkillSwap Production Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: skillswap-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-skillswap_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-skill_exchange}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-skillswap_user} -d ${DB_NAME:-skill_exchange}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - skillswap-internal
    # Don't expose port in production - only internal access

  # Backend API (TypeScript Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: skillswap-backend-prod
    restart: always
    expose:
      - "3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${DB_USER:-skillswap_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-skill_exchange}
      PORT: 3000
      NODE_ENV: production
      FRONTEND_URL: ${FRONTEND_URL:-https://skillswap.example.com}
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
    volumes:
      - ./backend/logs:/usr/src/app/logs
      - ./backend/backups:/usr/src/app/backups
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - skillswap-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.skillswap-backend.rule=Host(`api.skillswap.example.com`)"
      - "traefik.http.routers.skillswap-backend.tls=true"
      - "traefik.http.routers.skillswap-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.skillswap-backend.loadbalancer.server.port=3000"

  # Frontend React App (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: skillswap-frontend-prod
    restart: always
    expose:
      - "8080"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NGINX_HOST: ${FRONTEND_HOST:-skillswap.example.com}
      NGINX_PORT: 8080
    volumes:
      - ./frontend/logs:/var/log/nginx
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - skillswap-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.skillswap-frontend.rule=Host(`skillswap.example.com`)"
      - "traefik.http.routers.skillswap-frontend.tls=true"
      - "traefik.http.routers.skillswap-frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.skillswap-frontend.loadbalancer.server.port=8080"

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: skillswap-traefik
    restart: always
    command:
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
    networks:
      - skillswap-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.skillswap.example.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: skillswap-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - skillswap-internal

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: skillswap-backup
    restart: "no"
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./database/backup:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    command: /backup.sh
    networks:
      - skillswap-internal
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  letsencrypt_data:
    driver: local

networks:
  skillswap-internal:
    driver: bridge
    internal: false